<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>node.js笔记</title>
    <link href="/2023/12/26/node.js%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/26/node.js%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="node-js概览"><a href="#node-js概览" class="headerlink" title="node.js概览"></a>node.js概览</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><p>黑马nodejs<img src="C:\Users\apple\AppData\Roaming\Typora\typora-user-images\1686091278063.png" alt="1686091278063"></p><p>尚硅谷nodejs 18h<img src="C:\Users\apple\AppData\Roaming\Typora\typora-user-images\1686091493554.png" alt="1686091493554"></p><h2 id="node-js-是什么"><a href="#node-js-是什么" class="headerlink" title="node.js 是什么"></a>node.js 是什么</h2><p>nodejs可以看作是一个让js代码脱离浏览器的软件</p><h2 id="node-js-作用"><a href="#node-js-作用" class="headerlink" title="node.js 作用"></a>node.js 作用</h2><ol><li><p>web服务器</p></li><li><p>工具类 -webpack</p></li><li><p>桌面软件 -基于nodejs的electron 可以开发桌面软件 vscode</p></li></ol><h2 id="node-js-组成"><a href="#node-js-组成" class="headerlink" title="node.js 组成"></a>node.js 组成</h2><p>nodejs里<strong>不能用</strong>BOM和DOM ajax history navigator location, <strong>可以用</strong>console和定时器api</p><p>顶级对象不是window而是<strong>global</strong> globalThis(ES2020)</p><p><img src="C:\Users\apple\AppData\Roaming\Typora\typora-user-images\1686094560724.png" alt="1686094560724"></p><p><img src="C:\Users\apple\AppData\Roaming\Typora\typora-user-images\1686094570737.png" alt="1686094570737"></p><h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><h2 id="创建buffer"><a href="#创建buffer" class="headerlink" title="创建buffer"></a>创建buffer</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//1. alloc 数据清零</span><br><span class="hljs-keyword">let</span> buf = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">10</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf);<br><span class="hljs-comment">//2. allocUnsafe 不清零 速度快</span><br><span class="hljs-keyword">let</span> buf_2 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">allocUnsafe</span>(<span class="hljs-number">10</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf_2);<br><span class="hljs-comment">//3. from</span><br><span class="hljs-keyword">let</span> buf_3 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf_3);<br></code></pre></td></tr></table></figure><h2 id="操作buffer"><a href="#操作buffer" class="headerlink" title="操作buffer"></a>操作buffer</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 从数组转换到字符串</span><br><span class="hljs-keyword">let</span> buf_4 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">105</span>, <span class="hljs-number">108</span>, <span class="hljs-number">111</span>, <span class="hljs-number">118</span>, <span class="hljs-number">101</span>, <span class="hljs-number">121</span>, <span class="hljs-number">111</span>, <span class="hljs-number">117</span>]); <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf_4.<span class="hljs-title function_">toString</span>()) <br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//读取</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf_3[<span class="hljs-number">0</span>].<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 01101000, 参数2表示二进制</span><br><span class="hljs-comment">//修改</span><br>buf_3[<span class="hljs-number">0</span>] = <span class="hljs-number">97</span>;<br><span class="hljs-comment">//查看字符串结果</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf_3.<span class="hljs-title function_">toString</span>())<br></code></pre></td></tr></table></figure><blockquote><p>Note：</p><ol><li>如果修改的数值超过 255 ，则超过 8 位数据会被舍弃 </li><li>一个 utf-8 的字符 一般 占 3 个字节</li></ol></blockquote><h1 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p> 本章节会介绍如下几个操作： </p><ol><li>文件写入 </li><li>文件读取 </li><li>文件移动与重命名 </li><li>文件删除</li><li>文件夹操作 </li><li>查看资源状态</li></ol><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><table><thead><tr><th>说明</th><th>方法</th></tr></thead><tbody><tr><td>异步写入</td><td>writeFile</td></tr><tr><td>同步写入</td><td>writeFileSync</td></tr><tr><td>追加写入</td><td>appendFile &#x2F; appendFileSync</td></tr><tr><td>流式写入</td><td>createWriteStream</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 导入fs模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">//2.1 写入文件（异步</span><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;三人行，必有我师焉。&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-comment">//如果写入失败，则回调函数调用时，会传入错误对象，如写入成功，会传入 null</span><br><span class="hljs-keyword">if</span>(err)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功&#x27;</span>)；<br>&#125;);<br><br><span class="hljs-comment">//2.2 写入文件（同步</span><br><span class="hljs-keyword">try</span>&#123;<br>fs.<span class="hljs-title function_">writeFileSync</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;三人行，必有我师焉。&#x27;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br><br><span class="hljs-comment">//2.3 写入文件（追加</span><br>fs.<span class="hljs-title function_">appendFile</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>,<span class="hljs-string">&#x27;择其善者而从之，其不善者而改之。&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;追加成功&#x27;</span>)<br>&#125;);<br>fs.<span class="hljs-title function_">appendFileSync</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>,<span class="hljs-string">&#x27;\r\n温故而知新, 可以为师矣&#x27;</span>);<br><span class="hljs-comment">//writeFile实现追加写入</span><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;三人行，必有我师焉。&#x27;</span>, &#123;<span class="hljs-attr">flag</span>:<span class="hljs-string">&#x27;a&#x27;</span>&#125;err =&gt; &#123;<br><span class="hljs-comment">//如果写入失败，则回调函数调用时，会传入错误对象，如写入成功，会传入 null</span><br><span class="hljs-keyword">if</span>(err)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功&#x27;</span>)；<br>&#125;);<br><br><span class="hljs-comment">//2.4 写入文件(流式</span><br><span class="hljs-comment">//创建写入流对象</span><br><span class="hljs-keyword">let</span> ws = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;./观书有感.txt&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;半亩方塘一鉴开\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;天光云影共徘徊\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;问渠那得清如许\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;为有源头活水来\r\n&#x27;</span>);<br>ws.<span class="hljs-title function_">end</span>();<br><span class="hljs-comment">/* 程序打开一个文件是需要消耗资源的 ，流式写入可以减少打开关闭文件的次数。</span><br><span class="hljs-comment"> * 流式写入方式适用于 大文件写入或者频繁写入 的场景, writeFile 适合于 写入频率较低的场景*/</span><br></code></pre></td></tr></table></figure><p><strong>写入文件的场景</strong></p><p>文件写入 在计算机中是一个非常常见的操作，下面的场景都用到了文件写入 </p><ul><li><p>下载文件 </p></li><li><p>安装软件 </p></li><li><p>保存程序日志，如 Git 编辑器保存文件 </p></li><li><p>视频录制</p></li></ul><blockquote><p> 当需要<strong>持久化保存数据 <strong>的时候，应该想到</strong>文件写入</strong>  </p></blockquote><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><table><thead><tr><th>Method</th><th>details</th></tr></thead><tbody><tr><td>readFile</td><td>异步读取</td></tr><tr><td>readFileSync</td><td>同步读取</td></tr><tr><td>createReadStream</td><td>流式读取</td></tr></tbody></table><h3 id="异步读取"><a href="#异步读取" class="headerlink" title="异步读取"></a>异步读取</h3><p>语法：<code>fs.readFile(path[, options], callback)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入 fs 模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="同步读取"><a href="#同步读取" class="headerlink" title="同步读取"></a>同步读取</h3><p> 语法： <code>fs.readFileSync(path[, options]) </code></p><p> 返回值： <code>string | Buffer </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>);<br><span class="hljs-keyword">let</span> data2 = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="流式读取"><a href="#流式读取" class="headerlink" title="流式读取"></a>流式读取</h3><p> 语法：<code>fs.createReadStream(path[, options])</code></p><p> 返回值： <code>Object </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建读取流对象</span><br><span class="hljs-keyword">let</span> rs = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;./观书有感.txt&#x27;</span>);<br><span class="hljs-comment">//每次取出 64k 数据后执行一次 data 回调</span><br><span class="hljs-comment">//绑定data事件</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">length</span>);<br>&#125;);<br><span class="hljs-comment">//读取完毕后, 执行 end 回调 </span><br><span class="hljs-comment">//绑定end事件，可选事件</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取完成&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>电脑开机 </li><li>程序运行 </li><li>编辑器打开文件 </li><li>查看图片 </li><li>播放视频 </li><li>播放音乐 </li><li>Git 查看日志 </li><li>上传文件 </li><li>查看聊天记录</li></ul><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ol><li>同步方式</li><li>流式方式</li></ol><h2 id="重命名和移动"><a href="#重命名和移动" class="headerlink" title="重命名和移动"></a>重命名和移动</h2><blockquote><p> 移动可以用重命名实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./观书有感.txt&#x27;</span>, <span class="hljs-string">&#x27;./论语/观书有感.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span>&#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移动完成&#x27;</span>)<br>&#125;);<br>fs.<span class="hljs-title function_">renameSync</span>(<span class="hljs-string">&#x27;./座右铭.txt&#x27;</span>, <span class="hljs-string">&#x27;./论语/我的座右铭.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">unlink</span>(<span class="hljs-string">&#x27;./test.txt&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br>fs.<span class="hljs-title function_">unlinkSync</span>(<span class="hljs-string">&#x27;./test2.txt&#x27;</span>);<br><br><span class="hljs-comment">// 调用rm方法 14.4</span><br>fs.<span class="hljs-title function_">rm</span>(<span class="hljs-string">&#x27;./test.txt&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir &#x2F; mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir &#x2F; readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir &#x2F; rmdirSync</td><td>删除文件夹</td></tr></tbody></table><h3 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h3><p> 语法： <code>fs.mkdir(path[, options], callback)</code></p><p>​ <code>fs.mkdirSync(path[, options]) </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//异步创建文件夹</span><br>fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;./page&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建成功&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">//递归异步创建</span><br>fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;./1/2/3&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;递归创建成功&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">//递归同步创建文件夹</span><br>fs.<span class="hljs-title function_">mkdirSync</span>(<span class="hljs-string">&#x27;./x/y/z&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><h3 id="readdir-读取文件夹"><a href="#readdir-读取文件夹" class="headerlink" title="readdir 读取文件夹"></a>readdir 读取文件夹</h3><p> 语法：</p><p><code>fs.readdir(path[, options], callback)</code></p><p><code>fs.readdirSync(path[, options]) </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//异步读取</span><br>fs.<span class="hljs-title function_">readdir</span>(<span class="hljs-string">&#x27;./论语&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><span class="hljs-comment">//同步读取</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&#x27;./论语&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br></code></pre></td></tr></table></figure><h3 id="rmdir-删除文件夹"><a href="#rmdir-删除文件夹" class="headerlink" title="rmdir 删除文件夹"></a>rmdir 删除文件夹</h3><p>   语法：<code>fs.rmdir(path[, options], callback)</code></p><p>​  <code>fs.rmdirSync(path[, options]) </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//异步删除文件夹(DeprecationWarning</span><br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./page&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br><span class="hljs-comment">//异步递归删除文件夹</span><br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./1&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;递归删除&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">//同步递归删除文件夹</span><br>fs.<span class="hljs-title function_">rmdirSync</span>(<span class="hljs-string">&#x27;./x&#x27;</span>, &#123;<span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure><h2 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h2><p> 语法： </p><p><code>fs.stat(path[, options], callback)</code></p><p><code>fs.statSync(path[, options])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//异步获取状态</span><br>fs.<span class="hljs-title function_">stat</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br><span class="hljs-comment">//同步获取状态</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">statSync</span>(<span class="hljs-string">&#x27;./data.txt&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p> 结果值对象结构：</p><ul><li>size 文件体积 </li><li>birthtime 创建时间 </li><li>mtime 最后修改时间 </li><li>isFile 检测是否为文件 </li><li>isDirectory 检测是否为文件夹 </li><li>….</li></ul><h2 id="相对路径问题"><a href="#相对路径问题" class="headerlink" title="相对路径问题"></a>相对路径问题</h2><p>相对路径参照物：命令行的工作目录</p><h3 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h3><p> __dirname 与 require 类似，都是 Node.js 环境中的’全局’变量 __dirname 保存着 当前文件所在目录的绝对路径 ，可以使用 __dirname 与文件名拼接成绝对路径 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">readFileSync</span>(__dirname + <span class="hljs-string">&#x27;/data.txt&#x27;</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data) <br></code></pre></td></tr></table></figure><blockquote><p> 使用 fs 模块的时候，尽量使用 __dirname 将路径转化为绝对路径，这样可以避免相对路径产生的 Bug </p></blockquote><h2 id="练习：批量重命名"><a href="#练习：批量重命名" class="headerlink" title="练习：批量重命名"></a>练习：批量重命名</h2><p>1.个位数前面添加0</p><p><img src="C:\Users\apple\AppData\Roaming\Typora\typora-user-images\1686104295546.png" alt="1686104295546"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入 fs 模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">//读取 code 文件夹</span><br><span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&#x27;./code&#x27;</span>);<br><br><span class="hljs-comment">//遍历数组</span><br>files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">//拆分文件名</span><br>  <span class="hljs-keyword">let</span> data = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br>  <span class="hljs-keyword">let</span> [num, name] = data;<br>  <span class="hljs-comment">//判断</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Number</span>(num) &lt; <span class="hljs-number">10</span>)&#123;<br>    num = <span class="hljs-string">&#x27;0&#x27;</span> + num;<br>  &#125;<br>  <span class="hljs-comment">//创建新的文件名</span><br>  <span class="hljs-keyword">let</span> newName = num + <span class="hljs-string">&#x27;-&#x27;</span> + name;<br>  <span class="hljs-comment">//重命名</span><br>  fs.<span class="hljs-title function_">renameSync</span>(<span class="hljs-string">`./code/<span class="hljs-subst">$&#123;item&#125;</span>`</span>, <span class="hljs-string">`./code/<span class="hljs-subst">$&#123;newName&#125;</span>`</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>2.删掉02，让后面的文件名字中的数字减1</p><p><img src="C:\Users\apple\AppData\Roaming\Typora\typora-user-images\1686104349502.png" alt="1686104349502"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//导入 fs 模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">//读取 code 文件夹</span><br><span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&#x27;./code&#x27;</span>);<br><br><span class="hljs-comment">//遍历数组</span><br>files.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//拆分</span><br>  <span class="hljs-keyword">let</span> [num, name] = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br>  <span class="hljs-comment">//index 自增</span><br>  index++;<br>  <span class="hljs-comment">//判断</span><br>  index = index &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + index : index;<br>  <span class="hljs-comment">//拼接新的名字</span><br>  <span class="hljs-keyword">let</span> newName = index + <span class="hljs-string">&#x27;-&#x27;</span> + name;<br>  <span class="hljs-comment">//移动文件</span><br>  fs.<span class="hljs-title function_">renameSync</span>(<span class="hljs-string">`./code/<span class="hljs-subst">$&#123;item&#125;</span>`</span>, <span class="hljs-string">`./code/<span class="hljs-subst">$&#123;newName&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h1><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 <code>常用</code></td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称 （123.txt</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-comment">//拼接绝对路径</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;test&#x27;</span>));  <span class="hljs-comment">// resolve 第二个参数一定是相对路径</span><br>-----=2p获取路径分隔符<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-property">sep</span>);<br><span class="hljs-comment">//解析路径</span><br><span class="hljs-keyword">let</span> pathname = <span class="hljs-string">&#x27;D:/program file/nodejs/node.exe&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">parse</span>(pathname));<br><span class="hljs-comment">//获取路径基础名称</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">basename</span>(pathname));<br><span class="hljs-comment">//获取路径的目录名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">dirname</span>(pathname));<br><span class="hljs-comment">//获取路径的扩展名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">extname</span>(pathname));<br></code></pre></td></tr></table></figure><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><p>超文本传输协议</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/26/hello-world/"/>
    <url>/2023/12/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
